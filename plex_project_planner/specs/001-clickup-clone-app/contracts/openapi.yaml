# OpenAPI Specification: ClickUp Clone Application

openapi: 3.0.1
info:
  title: ClickUp Clone API
  description: API for the ClickUp clone application
  version: 1.0.0
paths:
  /api/projects:
    get:
      summary: Get all projects for the current user
      responses:
        '200':
          description: List of projects
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Project'
    post:
      summary: Create a new project
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProjectCreateRequest'
      responses:
        '201':
          description: Project created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Project'
        '400':
          $ref: '#/components/responses/BadRequest'

  /api/projects/{id}:
    get:
      summary: Get project by ID
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Project details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Project'
        '404':
          $ref: '#/components/responses/NotFound'
    put:
      summary: Update project
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProjectUpdateRequest'
      responses:
        '200':
          description: Project updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Project'
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'
    delete:
      summary: Delete project
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '204':
          description: Project deleted successfully
        '404':
          $ref: '#/components/responses/NotFound'

  /api/projects/{projectId}/tasks:
    get:
      summary: Get all tasks for a project
      parameters:
        - name: projectId
          in: path
          required: true
          schema:
            type: string
        - name: status
          in: query
          required: false
          schema:
            type: string
        - name: assigneeId
          in: query
          required: false
          schema:
            type: string
      responses:
        '200':
          description: List of tasks
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Task'
    post:
      summary: Create a new task in a project
      parameters:
        - name: projectId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TaskCreateRequest'
      responses:
        '201':
          description: Task created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Task'
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'

  /api/tasks:
    get:
      summary: Search tasks across projects
      parameters:
        - name: query
          in: query
          required: false
          schema:
            type: string
        - name: projectId
          in: query
          required: false
          schema:
            type: string
        - name: assigneeId
          in: query
          required: false
          schema:
            type: string
      responses:
        '200':
          description: List of tasks matching search criteria
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Task'

  /api/tasks/{id}:
    get:
      summary: Get task by ID
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Task details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Task'
        '404':
          $ref: '#/components/responses/NotFound'
    put:
      summary: Update task
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TaskUpdateRequest'
      responses:
        '200':
          description: Task updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Task'
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'
    delete:
      summary: Delete task
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '204':
          description: Task deleted successfully
        '404':
          $ref: '#/components/responses/NotFound'

  /api/tasks/{taskId}/comments:
    get:
      summary: Get all comments for a task
      parameters:
        - name: taskId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: List of comments
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Comment'
    post:
      summary: Create a comment on a task
      parameters:
        - name: taskId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CommentCreateRequest'
      responses:
        '201':
          description: Comment created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Comment'
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'

  /api/tasks/{taskId}/attachments:
    post:
      summary: Upload attachment to a task
      parameters:
        - name: taskId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                file:
                  type: string
                  format: binary
      responses:
        '201':
          description: Attachment uploaded successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Attachment'
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'

  /api/auth/register:
    post:
      summary: Register a new user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserRegistrationRequest'
      responses:
        '201':
          description: User registered successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          $ref: '#/components/responses/BadRequest'

  /api/auth/login:
    post:
      summary: Login to the application
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserLoginRequest'
      responses:
        '200':
          description: Login successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoginResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          description: Unauthorized

components:
  schemas:
    Project:
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
        description:
          type: string
        createdBy:
          type: string
          format: uuid
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
        status:
          type: string
          enum: [Active, Archived, Completed]
      required:
        - id
        - name
        - createdBy
        - createdAt
        - updatedAt
        - status

    ProjectCreateRequest:
      type: object
      properties:
        name:
          type: string
          minLength: 1
        description:
          type: string
        status:
          type: string
          enum: [Active]
          default: Active
      required:
        - name

    ProjectUpdateRequest:
      type: object
      properties:
        name:
          type: string
          minLength: 1
        description:
          type: string

    Task:
      type: object
      properties:
        id:
          type: string
          format: uuid
        title:
          type: string
        description:
          type: string
        projectId:
          type: string
          format: uuid
        assigneeId:
          type: string
          format: uuid
        priority:
          type: string
          enum: [Low, Medium, High, Urgent]
        status:
          type: string
          enum: [To Do, In Progress, Code Review, Testing, Done]
        dueDate:
          type: string
          format: date-time
        createdBy:
          type: string
          format: uuid
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
        position:
          type: integer
      required:
        - id
        - title
        - projectId
        - createdBy
        - createdAt
        - updatedAt

    TaskCreateRequest:
      type: object
      properties:
        title:
          type: string
          minLength: 1
        description:
          type: string
        assigneeId:
          type: string
          format: uuid
        priority:
          type: string
          enum: [Low, Medium, High, Urgent]
        dueDate:
          type: string
          format: date-time
        position:
          type: integer
          default: 0
      required:
        - title

    TaskUpdateRequest:
      type: object
      properties:
        title:
          type: string
          minLength: 1
        description:
          type: string
        assigneeId:
          type: string
          format: uuid
        priority:
          type: string
          enum: [Low, Medium, High, Urgent]
        status:
          type: string
          enum: [To Do, In Progress, Code Review, Testing, Done]
        dueDate:
          type: string
          format: date-time
        position:
          type: integer

    Comment:
      type: object
      properties:
        id:
          type: string
          format: uuid
        content:
          type: string
        taskId:
          type: string
          format: uuid
        authorId:
          type: string
          format: uuid
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
        isEdited:
          type: boolean
      required:
        - id
        - content
        - taskId
        - authorId
        - createdAt

    CommentCreateRequest:
      type: object
      properties:
        content:
          type: string
          minLength: 1
      required:
        - content

    Attachment:
      type: object
      properties:
        id:
          type: string
          format: uuid
        fileName:
          type: string
        contentType:
          type: string
        fileSize:
          type: integer
        storagePath:
          type: string
        taskId:
          type: string
          format: uuid
        projectId:
          type: string
          format: uuid
        uploadedBy:
          type: string
          format: uuid
        uploadedAt:
          type: string
          format: date-time
      required:
        - id
        - fileName
        - contentType
        - fileSize
        - storagePath
        - uploadedBy
        - uploadedAt

    User:
      type: object
      properties:
        id:
          type: string
          format: uuid
        email:
          type: string
          format: email
        firstName:
          type: string
        lastName:
          type: string
        avatarUrl:
          type: string
        createdAt:
          type: string
          format: date-time
        lastLoginAt:
          type: string
          format: date-time
        isActive:
          type: boolean
      required:
        - id
        - email
        - firstName
        - lastName
        - createdAt
        - isActive

    UserRegistrationRequest:
      type: object
      properties:
        email:
          type: string
          format: email
        password:
          type: string
          minLength: 8
        firstName:
          type: string
          minLength: 1
        lastName:
          type: string
          minLength: 1
      required:
        - email
        - password
        - firstName
        - lastName

    UserLoginRequest:
      type: object
      properties:
        email:
          type: string
          format: email
        password:
          type: string
      required:
        - email
        - password

    LoginResponse:
      type: object
      properties:
        token:
          type: string
        user:
          $ref: '#/components/schemas/User'

  responses:
    BadRequest:
      description: Bad request - validation error
      content:
        application/json:
          schema:
            type: object
            properties:
              error:
                type: string
    NotFound:
      description: Resource not found
      content:
        application/json:
          schema:
            type: object
            properties:
              error:
                type: string