@using PlexProjectPlanner.Core.Entities
@using PlexProjectPlanner.Application.DTOs
@inject HttpClient Http
@inject ILoggingService LoggingService

<div class="comments-section">
    <h5>Comments</h5>
    
    <div class="comment-input-section mb-3">
        <textarea class="form-control" @bind="newCommentContent" placeholder="Write a comment..." rows="3"></textarea>
        <div class="d-flex justify-content-end mt-2">
            <button class="btn btn-primary btn-sm" @onclick="AddComment" disabled="@isAddingComment">
                @if (isAddingComment)
                {
                    <span>Adding...</span>
                }
                else
                {
                    <span>Add Comment</span>
                }
            </button>
        </div>
    </div>
    
    @if (comments != null && comments.Any())
    {
        <div class="comments-list">
            @foreach (var comment in comments)
            {
                <div class="comment-card mb-2 p-3 border rounded">
                    <div class="comment-header d-flex justify-content-between">
                        <div class="comment-author">
                            <strong>User:</strong> @comment.AuthorId
                        </div>
                        <div class="comment-date text-muted small">
                            @comment.CreatedAt.ToString("MMM dd, yyyy HH:mm")
                        </div>
                    </div>
                    <div class="comment-content mt-2">
                        @comment.Content
                    </div>
                    @if (comment.UpdatedAt > comment.CreatedAt)
                    {
                        <div class="comment-edited text-muted small">
                            (edited)
                        </div>
                    }
                    <div class="comment-actions mt-2">
                        <button class="btn btn-sm btn-outline-primary" @onclick="() => EditComment(comment.Id)">
                            Edit
                        </button>
                        <button class="btn btn-sm btn-outline-danger ms-1" @onclick="() => DeleteComment(comment.Id)">
                            Delete
                        </button>
                    </div>
                </div>
            }
        </div>
    }
    else
    {
        <p class="text-muted">No comments yet. Be the first to comment.</p>
    }
</div>

@code {
    [Parameter] public Guid TaskId { get; set; }
    
    private List<Comment> comments;
    private string newCommentContent = "";
    private bool isAddingComment = false;
    
    protected override async Task OnParametersSetAsync()
    {
        await LoadComments();
    }
    
    private async Task LoadComments()
    {
        try
        {
            // In a real application, this would call the API to get comments for the task
            // For now, creating mock data
            comments = new List<Comment>();
            StateHasChanged();
        }
        catch (Exception ex)
        {
            await LoggingService.LogErrorAsync($"Error loading comments for task {TaskId}: {ex.Message}", "CommentsComponent", ex);
            comments = new List<Comment>();
        }
    }
    
    private async Task AddComment()
    {
        if (string.IsNullOrWhiteSpace(newCommentContent))
            return;
            
        isAddingComment = true;
        StateHasChanged();
        
        try
        {
            // In a real application, this would call the API to create a comment
            // For now, just refresh the list
            newCommentContent = "";
            await LoadComments();
        }
        catch (Exception ex)
        {
            await LoggingService.LogErrorAsync($"Error adding comment to task {TaskId}: {ex.Message}", "CommentsComponent", ex);
        }
        finally
        {
            isAddingComment = false;
            StateHasChanged();
        }
    }
    
    private async Task EditComment(Guid commentId)
    {
        // In a real application, this would call the API to update a comment
        await LoadComments();
    }
    
    private async Task DeleteComment(Guid commentId)
    {
        // In a real application, this would call the API to delete a comment
        await LoadComments();
    }
}